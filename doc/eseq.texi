\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename eseq.info
@include version.texi
@settitle Eseq @value{VERSION} Manual
@paragraphindent asis

@macro six
@cindex standards
@cindex Ecma-6
@cindex ISO 646
Ecma-6@tie{}/ ISO@tie{}646
@end macro

@macro thirtyfive
@cindex standards
@cindex Ecma-35
@cindex ISO/IEC@tie{}2200
Ecma-35@tie{}/ ISO/IEC@tie{}2200
@end macro

@macro fortyeight
@cindex standards
@cindex Ecma-48
@cindex ISO/IEC@tie{}6429
Ecma-48@tie{}/ ISO/IEC@tie{}6429
@end macro

@defcodeindex op
@syncodeindex op cp
@c %**end of header

@dircategory Miscellaneous
@direntry
* eseq: (eseq).                   Terminal control sequence analyzer.
* reseq: (eseq)Reseq.             Reverse-translate output from eseq.
@end direntry

@copying
This manual is for Eseq, version @value{VERSION}.

Copyright @copyright{} 2008 Micah Cowan <@email{micah@@cowan.name}>

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
Texts.  A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation
@end copying

@titlepage
@title Eseq @value{VERSION} Manual
@author by Micah Cowan <@email{micah@@cowan.name}>

@c  The following two commands
@c  Start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying

@end titlepage

@c So the toc is printed at the start.
@contents

@ifnottex
@node Top, Overview, (dir), (dir)
@top Eseq

This manual is for Eseq, version @value{VERSION}.

@noindent
Copyright @copyright{} 2008 Micah Cowan @email{micah@@cowan.name}
@end ifnottex

@menu
* Overview::                    What does Eseq do? (with example)
* Invoking Eseq::               How to run Eseq, with options 'n' stuff.

* Output Format::               
* Reseq::                       Reversing Eseq's output.

* Copying::                     Copying and sharing this manual.
* Index::                       Index of concepts.
@end menu

@node Overview, Invoking Eseq, Top, Top
@chapter Oveview
@cindex control character
@cindex control sequence
@cindex terminal
@cindex terminal emulator

Eseq is a tool for translating files that contain control characters
and terminal control sequences, into human-understandable text. It is
intended to aid in debugging problems in terminal emulators, software
that makes use of special terminal features, and interactions between
the two.

It is primarily targeted at individuals who possess a basic
understanding of terminal control sequences, especially
@cindex @sc{csi}
@cindex Control Sequence Introducer
@acronym{@sc{csi}} sequences; however, by default Eseq will try to
identify the sequences that it encounters, and what behavior they
might produce in a terminal.

@unnumberedsec A Quick Example
@cindex examples
@cindex terminal
@cindex Hello, world!

You can't beat a short example to demonstrate what a program does, so
here goes. Suppose you've got a program that writes the following
output to a terminal.

@example
@strong{Hi} @r{there, world}
@end example

@noindent
A simple text string, using a boldface font to render the first word.

Suppose that, after a moment or two, the program then replaced the
final word ``world'' with the word ``earth''.

In order to achieve this effect, the program would have to send
special controls to the terminal to ask it to start writing in bold
text, and then to revert back to normal text for the rest. To replace
the final word, it might have to issue a series of backspaces before
issuing the replacement word. All of this will be handled
transparently by the terminal, and you wouldn't see any of the special
characters the program sent to the terminal---unless perhaps you
convinced the program to write to a text file as if it were writing to
a terminal, or ran the program under a terminal capture utility such
as the
@cindex @command{script}
@command{script} command.

You may be able to produce this effect yourself with the following
shell command.

@example
$ printf '\033[1mHi\033[m there, world'; sleep 1; \
    printf '\b\b\b\b\bearth\n'
@end example

@noindent
If you were to examine the output from such a command with a text
editor, it might look something like this.

@example
^[[1mHi^[[m there, world^H^H^H^H^Hearth
@end example

@noindent
Not very readable, is it? That's where eseq comes in! When you run
that gibberish through the @command{eseq} command with the default
settings, you'll get the following output.

@example
: Esc [ 1 m
& SGR: SELECT GRAPHIC RENDITION
" Set bold text.
|Hi|
: Esc [ 0 m
& SGR: SELECT GRAPHIC RENDITION
" Clear graphic rendition to defaults.
| there, world|
. BS/^H BS/^H BS/^H BS/^H BS/^H
|earth|.
@end example

@cindex line prefixes
@cindex prefixes
@noindent
Note that the special conrol sequences that tell the terminal to start
and stop writing in boldface text are separated out on their own lines
(prefixed with a colon @samp{:}), and followed by an identification
(prefixed with an ampersand @samp{&}) and a description of what it
does (prefixed with a quote character @samp{"}).

The actual text appears in lines bracketed by pipe @samp{|}
characters.

The series of single-character backspace controls appear on a line
prefixed with a period @samp{.}, identified by its identifying acronym
(@sc{bs} for @sc{backspace}), and its control-key representation
(Control-H).

The final word, ``earth'', is followed by a period just
after the closing pipe symbol; this indicates a following linefeed (or
``newline'') character.

@cindex @command{reseq}
The @command{reseq} command may be used to reverse the procedure,
accepting the above input and printing out the original set of escape
sequences that produced it. @xref{Reseq}.

@node Invoking Eseq, Output Format, Overview, Top
@chapter Invoking Eseq
@cindex invoking
@cindex options
@cindex usage
@cindex help

The format for running the @code{eseq} program is:

@example
eseq @var{options} [-o @var{output-file}] [@var{input-file}]
eseq -h | --help
eseq -v | --version
@end example

@noindent
If @var{input-file} isn't specified, standard input will be
used. Output is written to standard output by default, but see the
@option{-o} option.

@table @option
@item --help
@itemx -h
@opindex --help
@opindex -h
Print usage information on standard output and exit successfully.

@item --version
@itemx -v
@opindex --version
@opindex -v
Print the version number and licensing information of @code{hello} on
standard output and then exit successfully.

@item -o @var{file}
@opindex -o
Write output to @var{file} instead of standard output.

@item -C
@opindex -C
@cpindex control character
For control characters from the C0 set of @fortyeight{}, don't write
the control-key representation, only the identifying acronym. For
example, write the carriage-return/line-feed combination as
@example
. CR LF
@end example
@noindent
rather than
@example
. CR/^M LF/^J
@end example

@item -L
@opindex -L
@cpindex label line
Don't print identifying labels (lines beginning with @samp{&}) for
escape sequences.

@item -D
@opindex -D
@cpindex description line
Don't print description lines (those beginning with @samp{"}).

@item -E
@opindex -E
@cpindex escape-sequence line
Don't print escape-sequence lines (beginning with
@samp{:}). @strong{Warning:} this results in loss of information, and in
particular means that running the output through the
@cindex @command{reseq}
@command{reseq} command won't reproduce the input.

Still, this option can be useful (in combination with @option{-L}) for
those that don't care about the exact sequence of characters, or what
their function is called, but just what their effects in the terminal
are (those that Eseq understands). The output produced 

@end table

@noindent
Note that there are no options for suppressing
@cpindex text line
text lines (@samp{|})
or
@cpindex control-character line
control-character lines (@samp{.}),
as there are for description or
escape-sequence lines.

The @option{-L}, @option{-D} and @option{-E} options also have
mnemonic equivalents of
@opindex -&
@option{-&},
@opindex -"
@option{-"} and
@opindex -:
@option{-:}
respectively, corresponding to the
@cindex line prefix
@cindex prefix, line
character prefix used for those
lines. However, while they may be more practical to remember, they
will be less practical to type, since both @option{-&} and @option{-"}
are apt to be interpreted as special by the shell, and must be quoted
in order to pass them to the @command{eseq} command.

@node Output Format, Reseq, Invoking Eseq, Top
@chapter Output Format

Eseq produces output that is primarily intended to be read by humans
(from input that is usually not). For this reason, Eseq's output
follows the following principles:

@itemize
@item
Displays for different sorts of characters and sequences are displayed
on distinct lines, and are easily distinguished by
@cindex line prefix
@cindex prefix, line
the initial character.
@item
Every input character should be unambiguously visible to the user in
the output (except, of course, when the user explicitly asks not to
see them, as with the @option{-E} option). In particular, trailing
space should be visible.
@item
Line lengths are limited to a maximum of 78 characters, so as to fit
comfortably on most terminal displays.
@item
The output makes clear distinction between line breaks that occur due
to line limits or intermixed character types, and those that actually
occurred in the input.
@end itemize

@ref{Overview} for an output example.

@menu
* Text Lines::                  
* Control-Character Lines::     
* Escape-Sequence Lines::       
@end menu

@node Text Lines, Control-Character Lines, Output Format, Output Format
@section Text Lines

@opindex |
Lines of plain text input, are output between a pair of pipe characters
@samp{|}, with a final period to indicate the linefeed character.
Input:

@example
Hello there
@end example

@noindent
Output:

@example
|Hello there|.
@end example

@noindent
Trailing whitespace is thus made plainly visible to the reader.

@example
|Trailing space:    |.
@end example

@noindent
A blank line is represented as empty content between the pipes.

@example
||.
@end example

@noindent
If the input line is too long to display as one line of output, it
will be displayed as follows, with dash characters, @samp{-}, to
mark continuity at the beginnings and ends of the lines (outside the
pipe characters).

@example
|This input line |-
-|was too long to|-
-| fit|.
@end example

You might wonder whether pipe characters themselves might have to be
escaped, so as to avoid confusion with the surrounding pipes. After
all, in a C string literal, denoted by double-quotes, @samp{"}, one
must escape literal double-quote characters by preceding them with a
backslash (and must then also escape literal backslashes): @code{"She
said \"no\""}. However, no such escaping mechanism is needed in Eseq.
Input:

@example
A line with a pipe | in it, and a line with just a pipe
|
@end example

@noindent
Output:

@example
|A line with a pipe | in it, and a line with just a pipe|.
|||.
@end example

@noindent
No special treatment whatsoever!

The reason Eseq can get away with this is that the pipe character only
has its special ``mark the enclosed as normal text'' meaning, when it
is the first and the last character on a line of output (aside from a
possible prefacing dash to indicate a wrapped line, or a trailing dash
or period).

A lot of the output lines you've seen so far have all ended with a
period, denoting the linefeed character. However, this isn't always
the case. For instance, if the input line contains a control
character, Eseq will close the text line (with just a pipe, no
period), print a control-character line with the control characters,
and then finish up the rest of the text line. The following sample
output represents a single line which contains a delete character and
a null character:

@example
|Fee fi|
. DEL/^?
|fo|
. NUL/^@@
|fum|.
@end example

@noindent
And here's a line that's terminated with a carriage-return/line-feed
combination, rather than just a linefeed.

@example
|The promised line|
. CR/^M LF/^J
@end example

@noindent
The linefeed character is special: when it's preceded by control
characters or escape sequence, it's printed as a control character;
when it's preceded by text characters (or by nothing at all), it's
printed as that final dot thing. This behavior is designed to make a
newline look like the end of a line or a blank line when it should,
and to look like a control character when it should.

And of course, if the final line in the file is missing a newline, the
dot won't appear there either.

Currently, the only characters included in text lines, are those from
the printable range of characters from US
@cindex standards
@cindex ASCII
ASCII (@six{})---and sometimes linefeed, represented by the special
final-dot notation. This means that if the terminal was using a
character set that high-value code points, all high-valued bytes will
be represented in hexadecimal on control-character lines, and not
displayed on a text line. Future versions of Eseq may provide options
allowing for these characters to be represented properly in text
lines, but for now, the output format is ASCII characters only.

Note that even characters falling in the normal range of ASCII
printable characters may not necessarily be represented correctly: for
instance, if escape codes are present in the input that would switch
the terminal to a different national variant of @six{}, then the real
terminal might display (say, for ISO-646ES)
@ifnotinfo
@samp{@~{N}}
@end ifnotinfo
@ifinfo
the LATIN CAPITAL LETTER N WITH TILDE
@end ifinfo
instead of
@samp{[}; but the output from Eseq will not change based on this (even
though it will recognize and identify the control sequences that
invoke that character set for use).

@node Control-Character Lines, Escape-Sequence Lines, Text Lines, Output Format
@section Control-Character Lines
@cindex control character
@cindex control-character line

Control-character lines are used to display characters whose code
values fall outside the range of printable characters from US
@cindex standards
@cindex ASCII
ASCII
(@six{}). That
is, those characters whose code values fall below below 32 decimal
(that is, those from the C0 set of control characters from
@fortyeight{}); and those whose values are at or above 127 decimal
(the ``delete'' character, and character byte values with the high bit
set).

@opindex .
Control-character lines begin with an initial dot, @samp{.}, followed by the
control characters or high-value bytes being represented.

@example
. BEL/^G NUL/^@ CR/^M LF/^J DEL/^? xA0 xFF
@end example

@noindent
Control characters (whose numeric codes fall below decimal 32, plus
the delete character at decimal 127) are represented by a mnemonic
acronym identifying the character's function. Unless the
@opindex -C
@option{-C} was given, this acronym is followed by a slash, and the
control-key combination that would produce the corresponding character
(control characters are usually much more recognizable from one or the
other of their name or their control-character representation, than
they are by their hexadecimal code value). The ``control-key
combination'' representation consists of a ``hat'' or ``circumflex
accent'' character, followed by a character with a value in the range
of 63 through 95 decimal.

@cindex delete character
Note that the delete character, designated as
@samp{DEL/^?}, is a special case, in that one can not generally
reproduce that key by holding down the control key and typing a
question mark; it is simply used as an identification of the
key.

Other values (high-value bytes) are represented by the lowercase
letter @samp{x} followed by the two-digit hexadecimal code value for
the character.

For reference, here's a table of the control characters (plus
@sc{del}). It is based on the information from Table 1 of
@fortyeight{} (the control-key representation has been added).

@cindex control characters table
@cindex table of control characters
@multitable @columnfractions .10 .10 .20 .10 .10 .20
@headitem Hex @tab Key @tab Name
@tab      Hex @tab Key @tab Name
@c
@item x00 @tab ^@@ @tab NUL
@tab  x10 @tab ^P @tab DLE
@c
@item x01 @tab ^A @tab SOH
@tab  x11 @tab ^Q @tab DC1
@c
@item x02 @tab ^B @tab STX
@tab  x12 @tab ^R @tab DC2
@c
@item x03 @tab ^C @tab ETX
@tab  x13 @tab ^S @tab DC3
@c
@item x04 @tab ^D @tab EOT
@tab  x14 @tab ^T @tab DC4
@c
@item x05 @tab ^E @tab ENQ
@tab  x15 @tab ^U @tab NAK
@c
@item x06 @tab ^F @tab ACK
@tab  x16 @tab ^V @tab SYN
@c
@item x07 @tab ^G @tab BEL
@tab  x17 @tab ^W @tab ETB
@c
@item x08 @tab ^H @tab BS
@tab  x18 @tab ^X @tab CAN
@c
@item x09 @tab ^I @tab TAB
@tab  x19 @tab ^Y @tab EM
@c
@item x0A @tab ^J @tab LF
@tab  x1A @tab ^Z @tab SUB
@c
@item x0B @tab ^K @tab VT
@tab  x1B @tab ^[ @tab ESC
@c
@item x0C @tab ^L @tab FF
@tab  x1C @tab ^\ @tab IS4
@c
@item x0D @tab ^M @tab CR
@tab  x1D @tab ^] @tab IS3
@c
@item x0E @tab ^N @tab SO
@tab  x1E @tab ^^ @tab IS2
@c
@item x0F @tab ^O @tab SI
@tab  x1F @tab ^_ @tab IS1
@c
@item x7F @tab ^? @tab DEL
@tab @tab @tab
@end multitable

@node Escape-Sequence Lines,  , Control-Character Lines, Output Format
@section Escape-Sequence Lines
@cindex escape-sequence lines

Escape-sequence lines, which begin with the colon, @samp{:}, don't add
any new semantics---any characters in an escape-sequence line could be
represented on control-character and text lines (and, with just a
one-character change in the escape sequence, would be). But they
serve to set escape sequences apart from normal control-character or
text lines, making it easier to see on one line all the characters
that contribute to a single control function, rather than splitting
them between control-character and text lines.
Here's an example with some intermixed escape-sequence and text lines
(without the usual label and description lines, which are described in
later sections):

@example
|Well |
: Esc [ 3 ; 31 m
|Daniel|
: Esc [ 23 ; 39 m
| didn't do it...|.
@end example

@noindent
The two escape-sequence lines represent, respectively, controls that
set text rendering to use italics in the color red, and to set normal
font rendering in the default color (the actual interpretation of
these controls may vary by application).

Note that the escape-sequence lines include control characters (well,
character, namely @samp{Esc}) intermixed with normal text
characters. So the above could have been written like:

@example
|Well |
. ESC
|[3;31mDaniel|
. ESC
|[23;39m didn't do it...|.
@end example

@noindent
But this loses the separation between characters that, yes, happen to
be text characters, but really just contribute to some terminal
control function invocation, and characters that are, really and
truly, text.

@example
: Esc [ 3 ; 31 m
@end example

@noindent
Some things to note. First, the escape key is noted as @samp{Esc}, and
not @samp{ESC} as it would be in a control-character line. Don't ask
me why; maybe I just felt it was one more thing to dilineate between
escape-sequence lines and control-character lines.

Also, each character is separated from its neighbors by a single
space, except that strings of digits are lumped all together.

Each character is represented by itself (including colon, as long as
it's not at the start of the line), except the escape character, and
the space character. Control characters and high-value bytes are not
currently represented on escape-sequence lines (they are not part of
any escape sequences Eseq recognizes), but if they are in the future
(say, as part of non-standardized escape sequences), they will most
likely be represented as @samp{xXX} hexadecimal strings (as high-value
bytes are represented in control-character lines.

If an escape sequence requires more than one output line, the
continuing lines will also begin with a colon, followed by two spaces
(instead of one).

@example
: Esc [ 1 ; 2 ; 3 ; 4
:  5 ; 6 ; 7 m
@end example

@node Reseq, Copying, Output Format, Top
@chapter The Reseq Command
@cindex @command{reseq}
@cindex Reversing the output of @command{eseq}
@cindex @command{eseq}, reversing the output

Synopsis:

@example
reseq [@var{input}] > @var{output}
@end example

@noindent
Eseq also comes with a @command{reseq} command, which essentially
does the reverse of @command{eseq}. If you feed it the output from
@command{eseq}, it will generate the corresponding escape
sequences---that is, it will generate the same content that was fed to
@command{eseq} to produce that output. The shell command

@example
$ eseq foo | reseq
@end example

@noindent
is roughly equivalent to

@example
$ cat foo
@end example

@noindent
The @command{reseq} command is written in
@cindex Perl
Perl, unlike @command{eseq}
which is compiled from C-language sources, and so requires a Perl
interpreter to be present in order to function.

Of the various types of lines output by the @command{eseq} command,
@command{reseq} only understands three;
@cpindex text line
text lines:

@example
|Hello, there|.
|Here are|-
-|some wrapped|-
-|lines|.
@end example

@cpindex control-character line
control-character lines:

@example
. CR/^M LF/^J
. CR LF
@end example

and
@cpindex escape-sequence line
escape-sequence lines:

@example
: Esc [ 31 ; 3 m
@end example

Any other sorts of lines encountered are ignored and discarded, and
have no effect on the output.

@node Copying, Index, Reseq, Top
@appendix Copying
@include fdl.texi

@node Index,  , Copying, Top
@unnumbered Index

@printindex cp

@bye
