#!/usr/bin/env perl

# @configure_input@

# Copyright (C) 2008  Micah Cowan <micah@cowan.name>
# 
# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty provided the copyright
# notice and this notice are preserved.

use strict;
use warnings;

our $VERSION = '@VERSION@';

our $inf;
our $outf;

our @controls = (
	"NUL", "SOH", "STX", "ETX",
	"EOT", "ENQ", "ACK", "BEL",
	"BS", "HT", "LF", "VT",
	"FF", "CR", "SO", "SI",
	"DLE", "DC1", "DC2", "DC3",
	"DC4", "NAK", "SYN", "ETB",
	"CAN", "EM", "SUB", "ESC",
	"IS4", "IS3", "IS2", "IS1"
);
our %controls;
$controls{$controls[$_]} = chr($_) for (0 .. $#controls);
$controls{'DEL'} = chr(0x7f);

sub usage {
    my $status = shift;
    my $f = $status == 0 ? \*STDOUT : \*STDERR;

    print $f <<END_USAGE;
Usage: reseq INPUT OUTPUT
   or: reseq -h | --help
   or: reseq -V | --version
Reverse the translations made by teseq.

 -h, --help         Print usage information (this message).
 -V, --version      Display version and warrantee

Report bugs to micah\@cowan.name
END_USAGE
    exit ($status);
}

sub version {
    print <<END_VERSION;
reseq (eseq) $VERSION
Copyright (C) 2008  Micah Cowan <micah\@cowan.name>.
Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
There is NO WARANTEE, to the extent permitted by law.
END_VERSION
    exit (0);
}

sub process_control {
    my $control = shift;
    if ($control =~ /^x([[:xdigit:]]{2})/) {
        print chr (hex ($1));
    }
    else {
        $control =~ s#/.*$##;
        print $controls{$control};
    }
}

sub process_sequence {
    my $stuff = shift;
    if ($stuff eq 'Esc') {
        print $outf "\033";
    }
    elsif ($stuff eq 'Spc') {
        print $outf ' ';
    }
    else {
        print $outf "$stuff";
    }
}

sub process_line {
    local $_ = shift;
    if (/^-?\|(.*)\|([-.]?)$/) {
        print $outf "$1";
        print $outf "\n" if $2 eq '.';
    }
    elsif (/^\./g) {
        &process_control ($1) while /\G\s*(\S+)/g;
    }
    elsif (/^:/g) {
        &process_sequence ($1) while /\G\s*(\S+)/g;
    }
}

if (grep (($_ eq '--help' || $_ eq '-h'), @ARGV)) {
    &usage (0);
}

if (grep (($_ eq '--version' || $_ eq '-V'), @ARGV)) {
    &version ();
}

# Ensure that there are no other options specified.
my $i = 0;
while ($i < @ARGV) {
    if ($ARGV[$i] eq '--') {
        splice (@ARGV, $i, 1);
        last;
    }
    elsif ($ARGV[$i] =~ /^-(.)/) {
        print STDERR "Unrecognized option -\1\n\n";
        &usage (1);
    }
    ++$i;
}

&usage (1) unless @ARGV == 2;
if ($ARGV[0] eq '-') {
    $inf = \*STDIN;
}
else {
    open ($inf, '<', $ARGV[0]) or die "Couldn't open $ARGV[0]: $!\n";
}

if ($ARGV[1] eq '-') {
    $outf = \*STDOUT;
}
else {
    open ($outf, '>', $ARGV[1]) or die "Couldn't open $ARGV[1]: $!\n";
}

my $line;
while (defined ($line = <$inf>)) {
    &process_line ("$line");
}
