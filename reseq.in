#!/usr/bin/env perl

# @configure_input@

# Copyright (C) 2008  Micah Cowan <micah@cowan.name>
# 
# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty provided the copyright
# notice and this notice are preserved.

use strict;
use warnings;

use Getopt::Long;

our $VERSION = '@VERSION@';

our $inf;
our $outf;
our $replay = 0;

our @controls = (
	"NUL", "SOH", "STX", "ETX",
	"EOT", "ENQ", "ACK", "BEL",
	"BS", "HT", "LF", "VT",
	"FF", "CR", "SO", "SI",
	"DLE", "DC1", "DC2", "DC3",
	"DC4", "NAK", "SYN", "ETB",
	"CAN", "EM", "SUB", "ESC",
	"IS4", "IS3", "IS2", "IS1"
);
our %controls;
$controls{$controls[$_]} = chr($_) for (0 .. $#controls);
$controls{'DEL'} = chr(0x7f);

sub usage {
    my $status = shift;
    my $f = $status == 0 ? \*STDOUT : \*STDERR;

    print $f <<END_USAGE;
Usage: reseq INPUT OUTPUT
   or: reseq --replay INPUT [OUTPUT]
   or: reseq -h | --help
   or: reseq -V | --version
Reverse the translations made by teseq.

 -h, --help         Print usage information (this message).
 -V, --version      Display version and warrantee

Report bugs to micah\@cowan.name
END_USAGE
    exit ($status);
}

sub version {
    print <<END_VERSION;
reseq (eseq) $VERSION
Copyright (C) 2008  Micah Cowan <micah\@cowan.name>.
Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
There is NO WARANTEE, to the extent permitted by law.
END_VERSION
    exit (0);
}

sub process_control {
    my $control = shift;
    if ($control =~ /^x([[:xdigit:]]{2})/) {
        print $outf chr (hex ($1));
    }
    else {
        $control =~ s#/.*$##;
        print $outf $controls{$control};
    }
}

sub process_sequence {
    my $stuff = shift;
    if ($stuff eq 'Esc') {
        print $outf "\033";
    }
    elsif ($stuff eq 'Spc') {
        print $outf ' ';
    }
    else {
        print $outf "$stuff";
    }
}

sub process_delay {
    select (undef, undef, undef, $_[0]);
}

sub process_line {
    local $_ = shift;
    if (/^-?\|(.*)\|([-.]?)$/) {
        print $outf "$1";
        print $outf "\n" if $2 eq '.';
    }
    elsif (/^\./g) {
        &process_control ($1) while /\G\s*(\S+)/g;
    }
    elsif (/^:/g) {
        &process_sequence ($1) while /\G\s*(\S+)/g;
    }
    elsif (/^@ +(.*)$/) {
        &process_delay ($1) if $replay;
    }
}

&Getopt::Long::Configure ('bundling');
&GetOptions ('help|h' => sub { &usage (0); },
             'version|V' => \&version,
             'replay' => \$replay);

if ($replay) {
    &usage (1) unless @ARGV == 1 || @ARGV == 2;
}
else {
    &usage (1) unless @ARGV == 2;
}
if ($ARGV[0] eq '-') {
    $inf = \*STDIN;
}
else {
    open ($inf, '<', $ARGV[0]) or die "Couldn't open $ARGV[0]: $!\n";
}

if ($replay && @ARGV < 2 || $ARGV[1] eq '-') {
    $outf = \*STDOUT;
}
else {
    open ($outf, '>', $ARGV[1]) or die "Couldn't open $ARGV[1]: $!\n";
}

my $line;
$| = 1;
while (defined ($line = <$inf>)) {
    &process_line ("$line");
}
