/* -*- c -*- */
/* test-inputbuf.cm: tests for inputbuf.c. */

/*
    Copyright (C) 2008 Micah Cowan

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "eseq.h"

#include <stdio.h>
#include <stdlib.h>

#include "inputbuf.h"

struct inputbuf *the_buffer;

#test basic
        /* Reading from the file. */
        fail_unless (inputbuf_get (the_buffer) == 'a');
        fail_unless (inputbuf_get (the_buffer) == 'b');
        fail_unless (inputbuf_saving (the_buffer) == 0);
        /* Reading from the file, and filling the buffer. */
        fail_unless (inputbuf_get (the_buffer) == 'c');
        fail_unless (inputbuf_get (the_buffer) == 'd');
        fail_unless (inputbuf_get (the_buffer) == 'e');
        fail_unless (inputbuf_rewind (the_buffer) == 0);
        /* Consuming the buffer. */
        fail_unless (inputbuf_get (the_buffer) == 'c');
        fail_unless (inputbuf_get (the_buffer) == 'd');
        fail_unless (inputbuf_saving (the_buffer) == 0);
        /* Reading from the buffer, but not consuming. */
        fail_unless (inputbuf_get (the_buffer) == 'e');
        fail_unless (inputbuf_forget (the_buffer) == 0);
        /* Reading from the file. */
        fail_unless (inputbuf_get (the_buffer) == 'f');
        fail_unless (inputbuf_get (the_buffer) == 'g');
        fail_unless (inputbuf_get (the_buffer) == 'h');
        /* Reading at EOF. */
        fail_unless (inputbuf_saving (the_buffer) == 0);
        fail_unless (inputbuf_get (the_buffer) == EOF);
        fail_unless (inputbuf_rewind (the_buffer) == 0);
        fail_unless (inputbuf_get (the_buffer) == EOF);

#main-pre
        FILE *f = fopen ("src/test-inputbuf.inf", "r");
        if (!f)
          {
            perror ("Couldn't open input file");
            exit (1);
          }
        the_buffer = inputbuf_new (f, 10);
