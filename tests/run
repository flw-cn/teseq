#!/bin/sh

set -e

get_vars()
{
		eseq_options=''
		invocation=''
		r_invocation=''
		if [ -f vars ]
		then
			. ./vars
		fi
		if [ -z "$invocation" ]
		then
			invocation='"$ESEQ" $eseq_options < input > output'
		fi
		if [ -z "$r_invocation" ]
		then
			r_invocation='"$RESEQ" < expected > r-output'
		fi
}

if [ "$#" -ge 1 -a "${1}" = "-r" ]
then
	# Test reseq
	run_test()
	(
		cd "$1"
		rm -f r-output
		get_vars
		eval "$r_invocation"
		result="$?"
		if [ "$result" -ne 0 ]
		then
			return "$result"
		fi
		cmp input r-output
		return $?
	)
else
	# Test eseq
	run_test()
	(
		cd "$1"
		rm -f output
		get_vars
		eval "$invocation"
		result="$?"
		if [ "$result" -ne 0 ]
		then
			return "$result"
		fi
		diff -u expected output
		return $?
	)
fi

########################################

: ${ESEQ=../../eseq}
: ${RESEQ=../../reseq}
: ${ESEQ_TESTS='
	empty
	cmdline-in-out
	cmdline--
	basic-text
	wrap
	prompt
	prompt-descript
	prompt-descript-only
	function-labels
	esc-seq-versus-not
	T.416
	params
	iso-2022
	cntrl-esc
	high-val'}

nt=0
np=0
nf=0
for t in $ESEQ_TESTS
do
	echo $t
	if run_test $t
        then
		np=$((np+1))
	else
		nf=$((nf+1))
		echo
		echo FAILED: $t
		echo
	fi
	nt=$((nt+1))
done

set +e
echo
echo "Ran $nt total tests"
if [ $nf -eq 0 ]
then
	tput setaf 2 2>/dev/null
	tput bold 2>/dev/null
	echo PASSED
	tput sgr0 2>/dev/null
else
	tput setaf 1 2>/dev/null
	tput bold 2>/dev/null
	echo FAILED
	tput sgr0 2>/dev/null
fi
echo "Passed: $np"
echo "Failed: $nf"

# vim:sw=8 sts=8 ts=8 noet
